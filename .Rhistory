1
}
else {
result  <<-  x * factorial_func(x - 1)
result
}
}
factorial_mem(10)
factorial_mem <- function(x){
result <- 1
if (x == 1) {
1
}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(10)
factorial_mem <- function(x){
result <- 1
if (x == 1) {
1
}
else {
result[x]  <<-  x * factorial_func(x - 1)
result
}
}
factorial_mem(10)
result=1
factorial_mem <- function(x){
if (x == 1) {
1
}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(10)
factorial_mem(8)
factorial_loop(8)
factorial_mem(12)
install.packages("microbenchmark")
library(microbenchmark)
library(microbenchmark)
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
result
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
result <- 1
factorial_mem <- function(x){
if (x == 1) {
1
} else if (n == length(result)) {return result[x]}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
result <- 1
factorial_mem <- function(x){
if (x == 1) {
1
} else if (n == length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(12)
factorial_mem <- function(x){
if (x == 1) {
1
} else if (x == length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(12)
results
result
actorial_mem(8)
factorial_mem(8)
factorial_mem(8)
result
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
length(result)
factorial_mem(13)
length(result)
factorial_mem(8)
length(result)
factorial_mem <- function(x){
if (x == 1) {
1
} else if (x < length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(8)
length(results)
length(result)
results
result
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
rm(result)
factorial_mem <- function(x){
if (x == 1) {
1
} else if (x < length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(8)
result <- 1
factorial_mem <- function(x){
if (x == 1) {
1
} else if (x < length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(8)
result
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
factorial_mem <- function(x){
if (x == 1) {
1
} else if (x < length(result) | x == length(result) ) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(8)
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
factorial_mem(14)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
factorial_mem(14)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
warnings()
factorial_mem(10)
results
result
result <- 1
factorial_mem <- function(x){
result <<- length(x)
if (x == 1) {
1
} else if  (x == length(result) ) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(10)
factorial_mem(5)
factorial_reduce(5)
factorial_reduce(10)
factorial_mem(14)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
results
result
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (x == length(result) ) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(14)
factorial_mem(5)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result[x]) ) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
result <- 1
factorial_mem(14)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
is.na(results[14])
is.na(result[14])
is.na(result[14])
!is.na(result[14])
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (x == length(result) ) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
result <- 1
factorial_mem(14)
factorial_mem(110)
rm(result)
result <- 1
factorial_mem(14)
factorial_mem(10)
factorial_mem(17)
result <- 1
factorial_mem(14)
factorial_mem(10)
factorial_mem(7)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
result
result <- 1
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (x == length(result) || x < length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_func(10)
factorial_mem(14)
factorial_mem(10)
factorial_mem(7)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
rm(result)
result <- 1
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (x == length(result) || x < length(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(8)
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
result
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
result <- 1
factorial_mem(5)
microbenchmark(
factorial_loop(5),
factorial_reduce(5),
factorial_func(5),
factorial_mem(5))
result <- 1
factorial_mem <- function(x){
result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(7)
result <- 1
factorial_mem <- function(x){
result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result)) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(5)
factorial_mem <- function(x){
result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result[x])) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(5)
microbenchmark(
factorial_loop(5),
factorial_reduce(5),
factorial_func(5),
factorial_mem(5))
factorial_mem(10)
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
result[10]
microbenchmark(result[10])
result <- 1
factorial_mem <- function(x){
#result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result[x])) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(10)
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
factorial_mem(8)
microbenchmark(
factorial_loop(8),
factorial_reduce(8),
factorial_func(8),
factorial_mem(8))
factorial_mem(11)
microbenchmark(
factorial_loop(11),
factorial_reduce(11),
factorial_func(11),
factorial_mem(11))
result <- 1
factorial_mem <- function(x){
# result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result[x])) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(14)
factorial_mem(10)
factorial_mem(7)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
result <- 1
factorial_mem <- function(x){
# result <<- length(x)
if (x == 1) {
1
} else if (!is.na(result[x])) {return(result[x])}
else {
result[x]  <<-  x * factorial_func(x - 1)
result[x]
}
}
factorial_mem(14)
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14),unit = "microseconds")
result-1
result=1
(factorial_mem(14))
factorial_mem(14)
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
factorial_mem(10)
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
factorial_mem(20)
microbenchmark(
factorial_loop(20),
factorial_reduce(20),
factorial_func(20),
factorial_mem(20))
factorial_mem(7)
microbenchmark(
factorial_loop(7),
factorial_reduce(7),
factorial_func(7),
factorial_mem(7))
microbenchmark(
factorial_loop(20),
factorial_reduce(20),
factorial_func(20),
factorial_mem(20))
microbenchmark(
factorial_loop(10),
factorial_reduce(10),
factorial_func(10),
factorial_mem(10))
microbenchmark(
factorial_loop(14),
factorial_reduce(14),
factorial_func(14),
factorial_mem(14))
